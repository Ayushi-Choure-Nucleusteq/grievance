package com.grievance.service;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.boot.test.context.SpringBootTest;

import com.grievance.entity.Department;
import com.grievance.entity.Member;
import com.grievance.entity.MemberRole;
import com.grievance.exception.ResourceNotFoundException;
import com.grievance.payloads.DepartmentDto;
import com.grievance.payloads.LoginDto;
import com.grievance.payloads.MemberDto;
import com.grievance.repository.DepartmentRepo;
import com.grievance.repository.MemberRepo;
import com.grievance.serviceimpl.MemberServiceImpl;


/**
 * Testing Member Service Methods
 */
@SpringBootTest
public class MemberServiceTest {

	@InjectMocks
	private MemberServiceImpl memberservice;
	
	@Mock
	private MemberRepo memberRepo;
	
	@Mock
    private DepartmentRepo deptRepo;
	
	@Test
    public void createMember_Success() {
        MemberDto memberDto = new MemberDto();
        DepartmentDto deptDto = new DepartmentDto();
        deptDto.setDeptName("HR");
        memberDto.setDepartment(deptDto);
        Department existingDept = new Department();
        existingDept.setDeptName("HR");
        Member savedMember = new Member(); 
        when(deptRepo.findByDeptName(deptDto.getDeptName())).thenReturn(existingDept);
        when(memberRepo.save(any(Member.class))).thenReturn(savedMember);

        MemberDto result = memberservice.createMember(memberDto);
        assertNotNull(result);
    }
	
	 @Test
	    public void testCreateMemberWithNullDepartment() {
	        assertThrows(IllegalArgumentException.class, () -> memberservice.createMember(new MemberDto()));
	    }
	 
	 @Test
	    public void testCreateMemberWithNonExistingDepartment() {
	        MemberDto memberDto = new MemberDto();
	        memberDto.setDepartment(new DepartmentDto());
	        memberDto.getDepartment().setDeptName("TestDept");

	        when(deptRepo.findByDeptName(toString())).thenReturn(null);

	        assertThrows(ResourceNotFoundException.class, () -> memberservice.createMember(memberDto));
	    }
	
	
	@Test
	public void testLoginMember_Success() {
		Member member = new Member();
		member.setMemberId(1);
		member.setEmail("ayushi@nucleusteq.com");
		member.setName("Ayushi");
		member.setPassword("Ayushi@123");
		member.setRole(MemberRole.ADMIN);
		Department dept=new Department();
		dept.setDeptId(1);
		dept.setDeptName("HR");
		member.setDepartment(dept);
	    when(memberRepo.findByEmail(member.getEmail())).thenReturn(member);
	    LoginDto loginDto=new LoginDto();
	    loginDto.setEmail("ayushi@nucleusteq.com");
	    loginDto.setPassword("Ayushi@123");
	    MemberDto loggedin = memberservice.loginMember(loginDto);
	    assertEquals(member,memberDtoToMember(loggedin));
	}
	
	@Test
	void loginServiceTest_ReturnsNull() {
	    LoginDto loginDto = new LoginDto();
	    loginDto.setEmail("ayushi.choure@nucleusteq.com");
	    loginDto.setPassword("Aayushi@01");
	    when(memberRepo.findByEmail("ayushi.choure@nucleusteq.com")).thenReturn(null);
	    assertThrows(ResourceNotFoundException.class, () -> {
	        memberservice.loginMember(loginDto);
	    });
	}


	@Test
	public void getAllmembersTest() {
		
		Member member = new Member();
		member.setMemberId(1);
		member.setEmail("ayushi@nucleusteq.com");
		member.setName("Ayushi");
		member.setPassword("Ayushi@123");
		member.setRole(MemberRole.ADMIN);
		Department dept=new Department();
		dept.setDeptId(1);
		dept.setDeptName("HR");
		member.setDepartment(dept);
		List<Member> members = new ArrayList<>();
		members.add(member);
        when(memberRepo.findAll()).thenReturn(members);
        List<MemberDto> result = memberservice.getAllmembers();
        assertEquals(members.size(), result.size());
		
	}
	
	
    private Member memberDtoToMember(final MemberDto memberDto) {
        Member member = new Member();
        member.setEmail(memberDto.getEmail());
        member.setMemberId(memberDto.getMemberId());
        member.setName(memberDto.getName());
        member.setPassword(memberDto.getPassword());
        member.setRole(MemberRole.valueOf(memberDto.getRole().name()));
        Department department = deptRepo.findByDeptName(memberDto.getDepartment().getDeptName());
        System.out.println(department);
        member.setDepartment(department);
        return member;
    }

//    private MemberDto memberToMemberDto(final Member member) {
//
//        MemberDto memberDto = new MemberDto();
//        memberDto.setEmail(member.getEmail());
//        memberDto.setMemberId(member.getMemberId());
//        memberDto.setName(member.getName());
//        memberDto.setPassword(member.getPassword());
//        memberDto.setRole(MemberRole.valueOf(member.getRole().name()));
//        DepartmentDto departmentDto = DeptToDeptDto(member.getDepartment());
//        memberDto.setDepartment(departmentDto);
//        return memberDto;
//    }

//    private DepartmentDto DeptToDeptDto(final Department department) {
//        DepartmentDto departmentDto = new DepartmentDto();
//        departmentDto.setDeptId(department.getDeptId());
//        departmentDto.setDeptName(department.getDeptName());
//        return departmentDto;
//    }
	
}